{"version":3,"file":"contentScript.js","mappings":";;;;;AAAA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,0CAA0C,gBAAgB;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,kCAAkC,gCAAgC;;AAElE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,iCAAiC;AAC3D,yBAAyB,kCAAkC;AAC3D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kDAAkD,gBAAgB;;AAElaAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,qBAAqB;;AAE7C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC,8CAA8C;AACnF;AACA;AACA,qCAAqC,4CAA4C;AACjF;AACA;AACA,qCAAqC,0CAA0C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc;;AAEzD,mCAAmC,OAAO,UAAU,SAAS;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,sCAAsC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,oBAAoB,gBAAgB;AACpC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA;AACA,WAAW;AACX;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,iCAAiC,0DAA0D;AAC3F;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,0CAA0C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;;AAGA","sources":["webpack://webwise/./src/contentScript.js"],"sourcesContent":["// ------------------- Inline Completion Logic -------------------\nconst REGEX_PATTERN = /\\/.*?;/;\n\n// Handles input events on editable elements\nfunction handleInputEvent(element) {\n  let newText;\n  if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n    newText = element.value;\n  } else {\n    newText = element.textContent;\n  }\n  console.log('Input Text:', newText);\n  if (REGEX_PATTERN.test(newText)) {\n    handleRegexMatch(newText, element);\n  }\n}\n\n// Processes text matching the regex pattern\nasync function handleRegexMatch(newText, element) {\n  const match = newText.match(REGEX_PATTERN)[0];\n  if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n    element.value = newText.replace(REGEX_PATTERN, '');\n  } else {\n    element.textContent = newText.replace(REGEX_PATTERN, '');\n  }\n\n  let arr = match.split(' ');\n  let promptType = arr[0].substring(1);\n  let prompt = arr.slice(1).join(' ').slice(0, -1);\n\n  const requestId = 'inlineCompletion-' + Date.now();\n\n  function handleMessage(message) {\n    if (\n      message.action === 'inlineCompletionResponse' &&\n      message.requestId === requestId\n    ) {\n      if (message.content) {\n        if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n          element.value += message.content;\n        } else {\n          element.textContent += message.content;\n        }\n      }\n      if (message.isDone) {\n        chrome.runtime.onMessage.removeListener(handleMessage);\n      }\n    }\n  }\n\n  chrome.runtime.onMessage.addListener(handleMessage);\n\n  chrome.runtime.sendMessage({\n    action: 'inlineCompletion',\n    prompt: prompt,\n    requestId: requestId,\n  });\n}\n\n// Adds event listeners to text elements\nfunction textListener(element) {\n  console.log(`Adding event listener to ${element.tagName}`);\n  element.addEventListener('input', (e) => handleInputEvent(element));\n}\n\n// Finds and attaches listeners to content-editable elements\nfunction findContentEditableElements() {\n  const contentEditableElements = document.querySelectorAll(\n    '[contenteditable=\"true\"], input, textarea'\n  );\n  contentEditableElements.forEach((element) => {\n    if (!element.hasEventListener) {\n      textListener(element);\n      element.hasEventListener = true;\n    }\n  });\n}\n\nconst observer = new MutationObserver((entries) => findContentEditableElements());\nobserver.observe(document.body, { childList: true, subtree: true });\n\n// ------------------- Menu Logic -------------------\n\n// Creates a tooltip element\nfunction createTooltip() {\n  const tooltip = document.createElement(\"div\");\n  tooltip.id = \"tooltip\";\n  tooltip.style.position = \"absolute\";\n  tooltip.style.display = \"none\";\n  tooltip.style.backgroundColor = \"black\";\n  tooltip.style.border = \"2px solid white\";\n  tooltip.style.padding = \"7px\";\n  tooltip.style.borderRadius = \"0 50% 50% 50%\";\n  tooltip.style.zIndex = \"9999\";\n  tooltip.style.cursor = \"pointer\";\n  document.body.appendChild(tooltip);\n  return tooltip;\n}\n\nconst tooltip = createTooltip();\n\n// Handles mouse up events to display tooltip\ndocument.addEventListener('mouseup', function (event) {\n  handleMouseUpEvent(event, tooltip);\n});\n\n// Processes mouse up events and shows tooltip if text is selected\nfunction handleMouseUpEvent(event, tooltip) {\n  setTimeout(() => {\n    const selection = window.getSelection();\n    const text = selection.toString().trim();\n    if (text) {\n      handleTextSelection(selection, tooltip);\n    } else {\n      tooltip.style.display = 'none';\n    }\n  }, 0);\n}\n\n// Positions and displays the tooltip based on text selection\nfunction handleTextSelection(selection, tooltip) {\n  const rects = selection.getRangeAt(0).getClientRects();\n  const rect = rects[rects.length - 1];\n  if (!rect) {\n    tooltip.style.display = 'none';\n    return;\n  }\n\n  tooltip.style.left = `${rect.right + 10 + window.scrollX}px`;\n  tooltip.style.top = `${rect.bottom + 10 + window.scrollY}px`;\n  tooltip.style.display = 'block';\n\n  tooltip.onmousedown = (e) => {\n    e.preventDefault();\n  };\n\n  tooltip.onclick = (e) => {\n    e.stopPropagation();\n    createMenu(selection.toString().trim());\n    tooltip.style.display = 'none';\n  };\n}\n\n// Creates and manages the menu interface\nfunction createMenu(selectedText) {\n  const menuContainer = document.createElement('div');\n  menuContainer.id = 'menu-container';\n  const shadowRoot = menuContainer.attachShadow({ mode: 'closed' });\n\n  const styles = `\n    :host {\n      all: initial;\n    }\n    .menu {\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%) scale(0);\n      background-color: #1e1e1e;\n      color: #ffffff;\n      border: 1px solid #3c3c3c;\n      border-radius: 10px;\n      padding: 20px;\n      z-index: 10000;\n      width: 400px;\n      max-width: 90%;\n      box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);\n      display: flex;\n      flex-direction: column;\n      align-items: stretch;\n      font-family: 'Arial', sans-serif;\n      animation: scaleUp 0.3s forwards ease;\n    }\n    @keyframes scaleUp {\n      to {\n        transform: translate(-50%, -50%) scale(1);\n      }\n    }\n    @keyframes scaleDown {\n      to {\n        transform: translate(-50%, -50%) scale(0);\n      }\n    }\n    .menu.closing {\n      animation: scaleDown 0.3s forwards ease;\n    }\n    .input-wrapper {\n      display: flex;\n      align-items: center;\n      background-color: #2c2c2c;\n      border-radius: 5px;\n      padding: 5px;\n    }\n    textarea {\n      flex-grow: 1;\n      background-color: transparent;\n      border: none;\n      color: #ffffff;\n      padding: 10px;\n      font-size: 14px;\n      resize: none;\n      outline: none;\n      height: 50px;\n      font-family: inherit;\n    }\n    button.send-button {\n      background-color: transparent;\n      border: none;\n      cursor: pointer;\n      padding: 10px;\n      margin-left: 5px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    button.send-button svg {\n      fill: #007bff;\n      width: 24px;\n      height: 24px;\n      transition: transform 0.2s;\n    }\n    button.send-button:hover svg {\n      transform: scale(1.1);\n    }\n    .response-container {\n      background-color: #2c2c2c;\n      padding: 15px;\n      border-radius: 5px;\n      max-height: 200px;\n      overflow-y: auto;\n      margin-top: 15px;\n      display: none;\n      flex-direction: column;\n      gap: 10px;\n      font-family: inherit;\n    }\n    .response-text {\n      color: #ffffff;\n      white-space: pre-wrap;\n    }\n    .copy-button {\n      align-self: flex-end;\n      padding: 5px 10px;\n      background-color: #4a90e2;\n      border: none;\n      border-radius: 5px;\n      color: #ffffff;\n      cursor: pointer;\n      font-size: 12px;\n      font-family: inherit;\n    }\n    .copy-button:hover {\n      background-color: #357ab8;\n    }\n  `;\n\n  const menuHTML = `\n    <style>${styles}</style>\n    <div class=\"menu\" id=\"menu\">\n      <div class=\"input-wrapper\">\n        <textarea id=\"questionInput\" placeholder=\"Type your question...\"></textarea>\n        <button class=\"send-button\" id=\"submitQuestion\">\n          <svg viewBox=\"0 0 24 24\">\n            <path d=\"M4 12L20 12M20 12L14 6M20 12L14 18\" stroke=\"#007bff\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          </svg>\n        </button>\n      </div>\n      <div class=\"response-container\" id=\"responseContainer\">\n        <div class=\"response-text\" id=\"responseText\"></div>\n        <button class=\"copy-button\" id=\"copyButton\">Copy</button>\n      </div>\n    </div>\n  `;\n\n  shadowRoot.innerHTML = menuHTML;\n  document.body.appendChild(menuContainer);\n\n  const submitButton = shadowRoot.getElementById('submitQuestion');\n  const questionInput = shadowRoot.getElementById('questionInput');\n  const responseContainer = shadowRoot.getElementById('responseContainer');\n  const responseText = shadowRoot.getElementById('responseText');\n  const copyButton = shadowRoot.getElementById('copyButton');\n  const menu = shadowRoot.getElementById('menu');\n\n  questionInput.focus({ preventScroll: true });\n\n  const requestId = 'menuRequest-' + Date.now();\n\n  submitButton.addEventListener('click', sendMessage);\n\n  questionInput.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      sendMessage();\n    }\n  });\n\n  // Sends the user question to the background script\n  function sendMessage() {\n    const question = questionInput.value.trim();\n    if (question === '') {\n      alert('Please enter a question.');\n      return;\n    }\n    questionInput.disabled = true;\n    submitButton.disabled = true;\n    submitButton.innerHTML = '<svg class=\"spinner\" viewBox=\"0 0 50 50\"><circle cx=\"25\" cy=\"25\" r=\"20\" stroke=\"#007bff\" stroke-width=\"5\" fill=\"none\" stroke-linecap=\"round\"></circle></svg>';\n\n    const spinnerStyle = document.createElement('style');\n    spinnerStyle.textContent = `\n      .spinner {\n        animation: spin 1s linear infinite;\n        width: 24px;\n        height: 24px;\n      }\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n    `;\n    shadowRoot.appendChild(spinnerStyle);\n\n    chrome.runtime.sendMessage(\n      {\n        action: 'askQuestionWithContext',\n        question: question,\n        context: selectedText,\n        requestId: requestId,\n      },\n      (response) => {\n        if (response && response.success) {\n          responseContainer.style.display = 'flex';\n          responseText.textContent = '';\n          copyButton.disabled = false;\n        } else {\n          alert(\n            'Error: ' +\n              (response ? response.error : 'No response from background script.')\n          );\n          questionInput.disabled = false;\n          submitButton.disabled = false;\n          restoreSendButton();\n          shadowRoot.removeChild(spinnerStyle);\n        }\n      }\n    );\n  }\n\n  // Restores the send button icon after sending\n  function restoreSendButton() {\n    submitButton.innerHTML = `\n      <svg viewBox=\"0 0 24 24\">\n        <path d=\"M4 12L20 12M20 12L14 6M20 12L14 18\" stroke=\"#007bff\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n      </svg>\n    `;\n  }\n\n  // Copies the response text to clipboard\n  copyButton.addEventListener('click', () => {\n    const textToCopy = responseText.textContent;\n    navigator.clipboard.writeText(textToCopy).then(\n      () => {\n        copyButton.textContent = 'Copied!';\n        setTimeout(() => {\n          copyButton.textContent = 'Copy';\n        }, 2000);\n      },\n      (err) => {\n        console.error('Could not copy text: ', err);\n      }\n    );\n  });\n\n  // Closes the menu when clicking outside\n  document.addEventListener('click', onDocumentClick);\n  function onDocumentClick(event) {\n    if (!menuContainer.contains(event.target) && !tooltip.contains(event.target)) {\n      closeMenu();\n    }\n  }\n\n  // Handles keyboard events for menu\n  document.addEventListener('keydown', onKeyDown);\n  function onKeyDown(event) {\n    if (event.key === 'Escape') {\n      closeMenu();\n    }\n  }\n\n  // Closes the menu with animation\n  function closeMenu() {\n    menu.classList.add('closing');\n    menu.addEventListener('animationend', function onAnimationEnd() {\n      menu.removeEventListener('animationend', onAnimationEnd);\n      menuContainer.remove();\n      document.removeEventListener('click', onDocumentClick);\n      document.removeEventListener('keydown', onKeyDown);\n    });\n  }\n\n  // Listens for responses from the background script\n  chrome.runtime.onMessage.addListener(function messageListener(message) {\n    if (\n      message.action === 'questionResponse' &&\n      message.requestId === requestId\n    ) {\n      if (message.content) {\n        responseContainer.style.display = 'flex';\n        responseText.textContent += message.content;\n      }\n      if (message.isDone) {\n        chrome.runtime.onMessage.removeListener(messageListener);\n        questionInput.disabled = false;\n        submitButton.disabled = false;\n        restoreSendButton();\n        const spinnerStyle = shadowRoot.querySelector('style:last-of-type');\n        if (spinnerStyle) shadowRoot.removeChild(spinnerStyle);\n      }\n      if (message.error) {\n        responseText.textContent = 'Error: ' + message.error;\n        chrome.runtime.onMessage.removeListener(messageListener);\n        questionInput.disabled = false;\n        submitButton.disabled = false;\n        restoreSendButton();\n        const spinnerStyle = shadowRoot.querySelector('style:last-of-type');\n        if (spinnerStyle) shadowRoot.removeChild(spinnerStyle);\n      }\n    }\n  });\n\n  return menuContainer;\n}\n\n// Initialize tooltip listeners\nfindContentEditableElements();\n\n// ------------------- Sidebar Logic -------------------\n\n// Creates the chat sidebar interface\nfunction createChatSidebarAlpha() {\n  if (document.getElementById('chat-sidebar-container')) {\n    return;\n  }\n\n  const styles = `\n    :host {\n      all: initial;\n    }\n    .chat-wrapper {\n      font-family: Arial, sans-serif;\n      font-size: 14px;\n      line-height: 1.5;\n      position: fixed;\n      right: 0;\n      top: 0;\n      width: 350px;\n      height: 100vh;\n      display: flex;\n      flex-direction: column;\n      background-color: #1e1e1e;\n      box-shadow: -5px 0px 15px rgba(0, 0, 0, 0.1);\n      z-index: 9999;\n      transition: transform 0.3s ease;\n      transform: translateX(100%);\n    }\n    .chat-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 0;\n      background-color: #1e1e1e;\n      border-bottom: 3px solid black;\n    }\n    .header-button {\n      flex: 1;\n      background-color: transparent;\n      border: none;\n      cursor: pointer;\n      padding: 15px 0;\n      transition: background-color 0.3s ease;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    .header-button:hover {\n      background-color: #3c3c3c;\n    }\n    .btnimg {\n      height: 20px;\n      width: 20px;\n    }\n    .chat-container {\n      flex-grow: 1;\n      display: flex;\n      flex-direction: column;\n      overflow: hidden;\n      color: white;\n    }\n    .messages-container {\n      flex-grow: 1;\n      flex-shrink: 1;\n      overflow-y: auto;\n      display: flex;\n      flex-direction: column;\n      padding: 10px 20px;\n    }\n    .input-wrapper {\n      flex-shrink: 0;\n      display: flex;\n      background-color: #2c2c2c;\n      border-radius: 20px;\n      margin: 0 10px 10px;\n      padding: 8px;\n    }\n    .input-field {\n      flex-grow: 1;\n      border: none;\n      padding: 8px 12px;\n      color: white;\n      background-color: transparent;\n      font-size: 14px;\n      outline: none;\n      resize: none;\n      min-height: 20px;\n      max-height: 100px;\n      overflow-y: auto;\n    }\n    .send-button {\n      width: 36px;\n      height: 36px;\n      padding: 6px;\n      background-color: #4a4a4a;\n      border-radius: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      transition: background-color 0.3s ease;\n      border: none;\n      cursor: pointer;\n    }\n    .send-button:hover {\n      background-color: #5a5a5a;\n    }\n    .send-button svg {\n      width: 20px;\n      height: 20px;\n    }\n    .reopen-button {\n      position: fixed;\n      right: 20px;\n      bottom: 20px;\n      width: 50px;\n      height: 50px;\n      border-radius: 50%;\n      background-color: #4a4a4a;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      cursor: pointer;\n      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n      transition: background-color 0.3s ease;\n      z-index: 9998;\n    }\n    .reopen-button:hover {\n      background-color: #5a5a5a;\n    }\n    .reopen-button svg {\n      width: 24px;\n      height: 24px;\n    }\n    .chats-view {\n      display: none;\n      flex-direction: column;\n      height: 100%;\n      overflow-y: auto;\n      padding: 20px;\n      color: white;\n    }\n    .chat-item {\n      padding: 10px;\n      margin-bottom: 10px;\n      background-color: #2c2c2c;\n      border-radius: 5px;\n      cursor: pointer;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .chat-item:hover {\n      background-color: #3c3c3c;\n    }\n    .message {\n      margin-bottom: 10px;\n      padding: 8px 12px;\n      border-radius: 10px;\n      max-width: 80%;\n      word-wrap: break-word;\n      white-space: pre-wrap;\n    }\n    .user-message {\n      align-self: flex-end;\n      background-color: #4a4a4a;\n    }\n    .bot-message {\n      align-self: flex-start;\n      background-color: #2c2c2c;\n    }\n    .chat-title {\n      flex-grow: 1;\n    }\n    .edit-button,\n    .delete-button {\n      background-color: transparent;\n      border: none;\n      cursor: pointer;\n      padding: 5px;\n      color: #ccc;\n    }\n    .edit-button:hover,\n    .delete-button:hover {\n      color: white;\n    }\n  `;\n\n  const template = `\n    <div class=\"chat-wrapper\">\n      <div class=\"chat-header\">\n        <button class=\"header-button\" id=\"newChatBtn\">\n          <img class=\"btnimg\" src=\"${chrome.runtime.getURL('images/plus-icon.svg')}\" alt=\"New Chat\">\n        </button>\n        <button class=\"header-button\" id=\"viewChatsBtn\">\n          <img class=\"btnimg\" src=\"${chrome.runtime.getURL('images/history.svg')}\" alt=\"View Chats\">\n        </button>\n        <button class=\"header-button\" id=\"closeBtn\">\n          <img class=\"btnimg\" src=\"${chrome.runtime.getURL('images/close.svg')}\" alt=\"Close\">\n        </button>\n      </div>\n      <div class=\"chat-container\" id=\"chatContainer\">\n        <div class=\"messages-container\" id=\"messagesContainer\"></div>\n        <div class=\"input-wrapper\">\n          <textarea class=\"input-field\" id=\"inputField\" placeholder=\"Message Webwise...\" rows=\"1\"></textarea>\n          <button class=\"send-button\" id=\"sendButton\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n              <path d=\"M7 11L12 6L17 11M12 18V7\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            </svg>\n          </button>\n        </div>\n      </div>\n      <div class=\"chats-view\" id=\"chatsView\"></div>\n    </div>\n    <div class=\"reopen-button\" id=\"reopenButton\">\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n        <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10z\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n      </svg>\n    </div>\n  `;\n\n  const shadow = document.createElement('div');\n  shadow.id = 'chat-sidebar-container';\n  const shadowRoot = shadow.attachShadow({ mode: 'open' });\n\n  shadowRoot.innerHTML = `<style>${styles}</style>${template}`;\n  document.body.appendChild(shadow);\n\n  const elements = {\n    chatWrapper: shadowRoot.querySelector('.chat-wrapper'),\n    chatContainer: shadowRoot.getElementById('chatContainer'),\n    messagesContainer: shadowRoot.getElementById('messagesContainer'),\n    inputField: shadowRoot.getElementById('inputField'),\n    sendButton: shadowRoot.getElementById('sendButton'),\n    newChatBtn: shadowRoot.getElementById('newChatBtn'),\n    viewChatsBtn: shadowRoot.getElementById('viewChatsBtn'),\n    closeBtn: shadowRoot.getElementById('closeBtn'),\n    reopenButton: shadowRoot.getElementById('reopenButton'),\n    chatsView: shadowRoot.getElementById('chatsView'),\n    inputWrapper: shadowRoot.querySelector('.input-wrapper'),\n  };\n\n  elements.chatWrapper.style.transform = 'translateX(100%)';\n  elements.reopenButton.style.display = 'flex';\n\n  let currentChatId = null;\n\n  let currentProvider = 'OpenAI';\n  let includeContext = false;\n  chrome.storage.local.get(['defaultProvider', 'includeContext'], (result) => {\n    if (result.defaultProvider) {\n      currentProvider = result.defaultProvider;\n    }\n    includeContext = result.includeContext || false;\n  });\n\n  // Sends user messages to the background script\n  const handleSend = () => {\n    const message = elements.inputField.value.trim();\n    if (message) {\n      handleResponseComplete();\n\n      const userMessageElement = document.createElement('div');\n      userMessageElement.className = 'message user-message';\n      userMessageElement.textContent = message;\n      elements.messagesContainer.appendChild(userMessageElement);\n      elements.inputField.value = '';\n      updateInputField();\n      elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;\n\n      if (includeContext) {\n        let pageContent = document.body.innerText;\n        pageContent = pageContent.substring(0, 10000);\n        var contextMessage = {\n          role: 'system',\n          content: 'The following is the content of the webpage the user is currently viewing:\\n' + pageContent,\n        };\n      }\n\n      chrome.runtime.sendMessage(\n        {\n          action: 'continueChat',\n          provider: currentProvider,\n          chatId: currentChatId,\n          message: message,\n          context: includeContext ? contextMessage : null,\n        },\n        (response) => {\n          if (response.success) {\n          } else {\n            console.error('Error from background script:', response.error);\n            const errorMessageElement = document.createElement('div');\n            errorMessageElement.className = 'message bot-message';\n            errorMessageElement.textContent = 'An error occurred: ' + response.error;\n            elements.messagesContainer.appendChild(errorMessageElement);\n            elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;\n          }\n        }\n      );\n    }\n  };\n\n  // Handles partial responses from the background script\n  const handlePartialResponse = (content) => {\n    let botMessageElement = elements.messagesContainer.querySelector('.message.bot-message.pending');\n    if (!botMessageElement) {\n      botMessageElement = document.createElement('div');\n      botMessageElement.className = 'message bot-message pending';\n      botMessageElement.textContent = '';\n      elements.messagesContainer.appendChild(botMessageElement);\n    }\n    botMessageElement.textContent += content;\n    elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;\n  };\n\n  // Finalizes the bot's response\n  const handleResponseComplete = () => {\n    const botMessageElement = elements.messagesContainer.querySelector('.message.bot-message.pending');\n    if (botMessageElement) {\n      botMessageElement.classList.remove('pending');\n    }\n  };\n\n  // Updates the send button based on input field content\n  const updateInputField = () => {\n    const isEmpty = elements.inputField.value.trim() === '';\n    elements.sendButton.style.opacity = isEmpty ? '0.5' : '1';\n    elements.sendButton.style.cursor = isEmpty ? 'default' : 'pointer';\n  };\n\n  // Deletes a chat and updates the UI\n  const deleteChat = (chatId, chatItem) => {\n    chrome.runtime.sendMessage({ action: 'deleteChat', chatId: chatId }, (response) => {\n      if (response.success) {\n        console.log('Chat deleted successfully');\n        chatItem.remove();\n        if (elements.chatsView.children.length === 0) {\n          const noChatsMessage = document.createElement('div');\n          noChatsMessage.textContent = 'No chats available.';\n          noChatsMessage.style.color = '#aaa';\n          elements.chatsView.appendChild(noChatsMessage);\n        }\n      } else {\n        console.error('Error deleting chat:', response.error);\n      }\n    });\n  };\n\n  // Closes the chat sidebar\n  const closeSidebar = () => {\n    elements.chatWrapper.style.transform = 'translateX(100%)';\n    elements.reopenButton.style.display = 'flex';\n  };\n\n  // Opens the chat sidebar\n  const openSidebar = () => {\n    elements.chatWrapper.style.transform = 'translateX(0)';\n    elements.reopenButton.style.display = 'none';\n    elements.inputField.focus();\n  };\n\n  // Displays the list of available chats\n  const showChatsView = () => {\n    elements.chatContainer.style.display = 'none';\n    elements.chatsView.style.display = 'flex';\n    elements.chatsView.innerHTML = '';\n\n    chrome.runtime.sendMessage({ action: 'getChatList' }, (response) => {\n      if (response.success) {\n        const chatList = response.chatList;\n        if (chatList.length === 0) {\n          const noChatsMessage = document.createElement('div');\n          noChatsMessage.textContent = 'No chats available.';\n          noChatsMessage.style.color = '#aaa';\n          elements.chatsView.appendChild(noChatsMessage);\n        } else {\n          chatList.forEach((chatObj) => {\n            const { chatId, title } = chatObj;\n            const chatItem = document.createElement('div');\n            chatItem.className = 'chat-item';\n\n            const chatTitle = document.createElement('span');\n            chatTitle.className = 'chat-title';\n            chatTitle.textContent = title;\n            chatItem.appendChild(chatTitle);\n\n            const buttonContainer = document.createElement('div');\n            buttonContainer.style.display = 'flex';\n\n            const editButton = document.createElement('button');\n            editButton.className = 'edit-button';\n            editButton.textContent = '✏️';\n            editButton.addEventListener('click', (e) => {\n              e.stopPropagation();\n              const newTitle = prompt('Enter new chat title:', title);\n              if (newTitle) {\n                renameChat(chatId, newTitle);\n                chatTitle.textContent = newTitle;\n              }\n            });\n            buttonContainer.appendChild(editButton);\n\n            const deleteButton = document.createElement('button');\n            deleteButton.className = 'delete-button';\n            deleteButton.textContent = '🗑️';\n            deleteButton.addEventListener('click', (e) => {\n              e.stopPropagation();\n              if (confirm('Are you sure you want to delete this chat?')) {\n                deleteChat(chatId, chatItem);\n              }\n            });\n            buttonContainer.appendChild(deleteButton);\n\n            chatItem.appendChild(buttonContainer);\n\n            chatItem.addEventListener('click', () => loadChat(chatId));\n            elements.chatsView.appendChild(chatItem);\n          });\n        }\n      } else {\n        console.error('Error getting chat list:', response.error);\n      }\n    });\n  };\n\n  // Renames a chat with a new title\n  const renameChat = (chatId, newTitle) => {\n    chrome.runtime.sendMessage({ action: 'renameChat', chatId: chatId, newTitle: newTitle }, (response) => {\n      if (response.success) {\n        console.log('Chat renamed successfully');\n      } else {\n        console.error('Error renaming chat:', response.error);\n      }\n    });\n  };\n\n  // Shows the main chat view\n  const showChatView = () => {\n    elements.chatsView.style.display = 'none';\n    elements.chatContainer.style.display = 'flex';\n  };\n\n  // Loads a specific chat by its ID\n  const loadChat = (chatId) => {\n    currentChatId = chatId;\n    chrome.runtime.sendMessage({ action: 'getChatHistory', chatId: chatId }, (response) => {\n      if (response.success) {\n        const history = response.history;\n        elements.messagesContainer.innerHTML = '';\n        history.forEach((messageObj) => {\n          const messageElement = document.createElement('div');\n          messageElement.className =\n            'message ' + (messageObj.role === 'user' ? 'user-message' : 'bot-message');\n          messageElement.textContent = messageObj.content;\n          elements.messagesContainer.appendChild(messageElement);\n        });\n        elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;\n        showChatView();\n      } else {\n        console.error('Error getting chat history:', response.error);\n      }\n    });\n  };\n\n  // Event listeners for input and buttons\n  elements.inputField.addEventListener('input', updateInputField);\n  elements.sendButton.addEventListener('click', handleSend);\n  elements.inputField.addEventListener('keypress', (e) => {\n    e.stopPropagation();\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  });\n\n  ['keydown', 'keyup', 'keypress', 'input'].forEach((eventType) => {\n    elements.inputField.addEventListener(eventType, (e) => {\n      e.stopPropagation();\n    });\n  });\n\n  elements.closeBtn.addEventListener('click', closeSidebar);\n  elements.reopenButton.addEventListener('click', openSidebar);\n  elements.viewChatsBtn.addEventListener('click', showChatsView);\n  elements.newChatBtn.addEventListener('click', () => {\n    currentChatId = 'chat-' + Date.now();\n    elements.messagesContainer.innerHTML = '';\n    elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;\n    showChatView();\n    elements.inputField.focus();\n  });\n\n  updateInputField();\n\n  // Listens for responses related to the current chat\n  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.action === 'partialResponse' && request.chatId === currentChatId) {\n      handlePartialResponse(request.content);\n    } else if (request.action === 'responseComplete' && request.chatId === currentChatId) {\n      handleResponseComplete();\n    }\n  });\n\n  return elements;\n}\n\n// Initializes the chat sidebar when the script loads\ncreateChatSidebarAlpha();\n\n\nconsole.log(chrome.runtime.getURL('images/close.svg'))\n"],"names":[],"sourceRoot":""}